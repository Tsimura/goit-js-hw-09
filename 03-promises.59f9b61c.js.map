{"version":3,"sources":["js/03-promises.js"],"names":["ref","form","document","querySelector","firstDelay","delayStep","amount","btn","addEventListener","onFormSubmit","DELAY","createPromise","position","delay","console","log","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","setPromises","v","i","then","onSuccess","catch","onError","result","error","event","preventDefault","formElement","currentTarget","elements","delayEl","value","stepEl","step","amountEl","formData","reset"],"mappings":";AAAA,MAAMA,EAAM,CACVC,KAAMC,SAASC,cAAc,QAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,OAAQJ,SAASC,cAAc,wBAC/BI,IAAKL,SAASC,cAAc,0BAG9BH,EAAIC,KAAKO,iBAAiB,SAAUC,GAEpC,IAAIC,EAAQ,IACZ,SAASC,EAAcC,EAAUC,GAKxB,OAFPC,QAAQC,IAAI,SAAUL,GAEf,IAAIM,QAAQ,CAACC,EAASC,KACrBC,MAAAA,EAAgBC,KAAKC,SAAW,GAEtCC,WAAW,KACLH,EACFF,EAAQ,yBAERC,EAAO,wBAERR,KAMP,SAASa,EAAYC,EAAGX,GACjB,IAAA,IAAIY,EAAI,EAAGA,EAAID,EAAGC,GAAK,EAE1Bf,GAAS,IACTC,IAAgBe,KAAKC,GAAWC,MAAMC,GAM1C,SAASF,EAAUG,GACjBhB,QAAQC,IAAIe,GAGd,SAASD,EAAQE,GACfjB,QAAQC,IAAIgB,GAGd,SAAStB,EAAauB,GACpBA,EAAMC,iBACAC,MAAAA,EAAcF,EAAMG,cAAcC,SAClCC,EAAUH,EAAYrB,MAAMyB,MAC5BC,EAASL,EAAYM,KAAKF,MAC1BG,EAAWP,EAAY5B,OAAOgC,MAC9BI,EAAW,CAAEL,QAAAA,EAASE,OAAAA,EAAQE,SAAAA,GAEpC3B,QAAQC,IAAI,YAAa2B,GACzB5B,QAAQC,IAAI,WAAYsB,GACxBvB,QAAQC,IAAI,UAAWwB,GACvBzB,QAAQC,IAAI,YAAa0B,GAEzBlB,EAAY,GACZvB,EAAIC,KAAK0C","file":"03-promises.59f9b61c.js","sourceRoot":"../src","sourcesContent":["const ref = {\n  form: document.querySelector('form'),\n  firstDelay: document.querySelector('input[name=\"delay\"]'),\n  delayStep: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n  btn: document.querySelector('button[type=\"submit\"]'),\n};\n\nref.form.addEventListener('submit', onFormSubmit);\n\nlet DELAY = 1000;\nfunction createPromise(position, delay) {\n  // for (let i = 0; i < position; i += 1) {\n  // console.log(i);\n  console.log('DELAY:', DELAY);\n  // DELAY += position;\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve('✅ Fulfilled promise! ');\n      } else {\n        reject('❌ Rejected promise!');\n      }\n    }, DELAY);\n  });\n  // }\n}\n\n// setPromises(5);\nfunction setPromises(v, delay) {\n  for (let i = 0; i < v; i += 1) {\n    // console.log(i);\n    DELAY += 1000;\n    createPromise().then(onSuccess).catch(onError);\n  }\n}\n\n// createPromise(4).then(onSuccess).catch(onError);\n\nfunction onSuccess(result) {\n  console.log(result);\n}\n\nfunction onError(error) {\n  console.log(error);\n}\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  const formElement = event.currentTarget.elements;\n  const delayEl = formElement.delay.value;\n  const stepEl = formElement.step.value;\n  const amountEl = formElement.amount.value;\n  const formData = { delayEl, stepEl, amountEl };\n  // DELAY = delayEl;\n  console.log('formData:', formData);\n  console.log('delayEl:', delayEl);\n  console.log('stepEl:', stepEl);\n  console.log('amountEl:', amountEl);\n\n  setPromises(5);\n  ref.form.reset();\n}\n\n// function position({ delayEl, stepEl, amountEl }) {\n//   for (let i = 0; i < amountEl; i += 1) {\n//     onFormSubmit();\n//     let amountEl = 1;\n//     amountEl += i;\n//     // delayEl += stepEl;\n//     console.log('amount:', amountEl);\n//     console.log(delayEl);\n//     console.log(stepEl);\n//   }\n// }\n\n// createCunter(5);\n// function createCunter(amount) {\n//   // makeDelay(1, 1, 2);\n//   for (let i = 0; i < amount; i += 1) {\n//     let amount = 1;\n//     amount += i;\n//     // console.log(amount);\n\n//     createPromise(2, 1500).then(({ position, delay }) => {\n//       console.log(`✅ Fulfilled promise ${amount} in ${i + 1}ms`);\n//     });\n//     // delay += amount;\n//   }\n// }\n\n// function getSolution() {\n//   return Math.random() > 0.3;\n// }\n"]}